/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$bag: (780px, 104px, -780px, -104px, 32px, 32px, 1070px, 362px, '../sprites/sprite.png', 'bag', );
$created: (397px, 52px, -397px, -52px, 673px, 42px, 1070px, 362px, '../sprites/sprite.png', 'created', );
$createdby: (397px, 0px, -397px, 0px, 673px, 42px, 1070px, 362px, '../sprites/sprite.png', 'createdby', );
$facebook: (84px, 196px, -84px, -196px, 74px, 74px, 1070px, 362px, '../sprites/sprite.png', 'facebook', );
$insta: (168px, 196px, -168px, -196px, 74px, 74px, 1070px, 362px, '../sprites/sprite.png', 'insta', );
$logo: (0px, 0px, 0px, 0px, 387px, 186px, 1070px, 362px, '../sprites/sprite.png', 'logo', );
$magn: (252px, 196px, -252px, -196px, 45px, 45px, 1070px, 362px, '../sprites/sprite.png', 'magn', );
$next: (0px, 280px, 0px, -280px, 27px, 82px, 1070px, 362px, '../sprites/sprite.png', 'next', );
$phone-f: (740px, 104px, -740px, -104px, 30px, 36px, 1070px, 362px, '../sprites/sprite.png', 'phone-f', );
$phone: (307px, 196px, -307px, -196px, 33px, 40px, 1070px, 362px, '../sprites/sprite.png', 'phone', );
$prev: (37px, 280px, -37px, -280px, 27px, 82px, 1070px, 362px, '../sprites/sprite.png', 'prev', );
$rating-comp: (397px, 104px, -397px, -104px, 333px, 37px, 1070px, 362px, '../sprites/sprite.png', 'rating-comp', );
$twitter: (0px, 196px, 0px, -196px, 74px, 74px, 1070px, 362px, '../sprites/sprite.png', 'twitter', );
$spritesheet-sprites: ($bag, $created, $createdby, $facebook, $insta, $logo, $magn, $next, $phone-f, $phone, $prev, $rating-comp, $twitter, );
$spritesheet: (1070px, 362px, '../sprites/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
